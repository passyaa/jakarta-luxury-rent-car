// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/cars": {
            "get": {
                "description": "Get available luxury cars",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public"
                ],
                "summary": "Get available luxury cars",
                "responses": {
                    "200": {
                        "description": "List of available luxury cars",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Car"
                            }
                        }
                    },
                    "500": {
                        "description": "Error retrieving cars from database",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/drivers": {
            "get": {
                "description": "Get drivers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public"
                ],
                "summary": "Get drivers",
                "responses": {
                    "200": {
                        "description": "List of available drivers",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Driver"
                            }
                        }
                    },
                    "500": {
                        "description": "Error get drivers",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Login user and return JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Register and Login"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "User login request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Invalid email or password",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to generate token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/owner/approve-booking": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Approve or reject a car booking",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Role Owner"
                ],
                "summary": "Approve or reject a car booking",
                "parameters": [
                    {
                        "description": "Approval request body containing rental ID and action (approve/reject)",
                        "name": "approvalReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ApprovalRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message indicating the booking has been approved or rejected",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request format, validation error, car out of stock, or invalid action",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Permission denied. Only owners can approve or reject bookings.",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User, car, or rental history not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to update car stock, rental history, or send notifications",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/packages": {
            "get": {
                "description": "Retrieve a list of all available event packages",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public"
                ],
                "summary": "Get available event packages",
                "responses": {
                    "200": {
                        "description": "List of available event packages",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.EventPackage"
                            }
                        }
                    },
                    "500": {
                        "description": "Error get event packages",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Register and Login"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "User registration request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "User already exists with this email",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to hash password or register user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/booking": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Book a car",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Role User"
                ],
                "summary": "Book a car",
                "parameters": [
                    {
                        "description": "Booking request body containing car ID and other booking details",
                        "name": "bookingReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.BookingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message and details of the car booking",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request format, validation error, or insufficient stock",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Car, driver, or package not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to create rental history, send notifications, or process booking",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/call-assistance": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Call assistance request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Role User"
                ],
                "summary": "Call assistance request",
                "parameters": [
                    {
                        "description": "Call assistance request body containing rental ID, location, and description",
                        "name": "assistanceReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CallAssistanceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message and details of the call assistance request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User, rental history, or car not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to create call assistance record or send WhatsApp notification",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/get-deposit": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "RGet user deposit amount",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Role User"
                ],
                "summary": "Get user deposit amount",
                "responses": {
                    "200": {
                        "description": "User's email and deposit amount",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/get-membership": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get user membership details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Role User"
                ],
                "summary": "Get user membership details",
                "responses": {
                    "200": {
                        "description": "Membership details including membership ID, user ID, email, and discount level",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User not found or no membership found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/making-payment": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "MakingPayment updates status from \"Book\" to \"Paid\"",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Role User"
                ],
                "summary": "MakingPayment updates status from \"Book\" to \"Paid\"",
                "parameters": [
                    {
                        "description": "Payment request body containing rental ID and payment details",
                        "name": "paymentReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rental status updated to 'Paid' successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body or rental status is not 'Book'",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Rental history or user not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to update rental status or deposit amount",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/register-membership": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Register a new membership",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Role User"
                ],
                "summary": "Register a new membership",
                "responses": {
                    "200": {
                        "description": "Details of the newly registered membership including membership ID, user ID, email, and discount level",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "User already has a membership registered",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to register membership",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/users/topup": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Top up user deposit amount",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Role User"
                ],
                "summary": "Top up user deposit amount",
                "parameters": [
                    {
                        "description": "Top-up request body",
                        "name": "topUpReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.TopUpRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated email and deposit amount",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to update deposit amount",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.ApprovalRequest": {
            "type": "object",
            "required": [
                "action",
                "rental_id"
            ],
            "properties": {
                "action": {
                    "type": "string",
                    "enum": [
                        "approve",
                        "reject"
                    ]
                },
                "rental_id": {
                    "type": "integer"
                }
            }
        },
        "handlers.BookingRequest": {
            "type": "object",
            "required": [
                "car_id",
                "driver_id",
                "package_id",
                "rental_date",
                "rental_duration",
                "return_date"
            ],
            "properties": {
                "airport_transfer": {
                    "description": "Optional",
                    "type": "boolean"
                },
                "car_id": {
                    "type": "integer"
                },
                "concierge_services": {
                    "description": "Optional",
                    "type": "boolean"
                },
                "driver_id": {
                    "type": "integer"
                },
                "dropoff_location": {
                    "description": "Optional",
                    "type": "string"
                },
                "package_id": {
                    "type": "integer"
                },
                "pickup_location": {
                    "description": "Optional",
                    "type": "string"
                },
                "rental_date": {
                    "type": "string"
                },
                "rental_duration": {
                    "type": "string",
                    "enum": [
                        "daily",
                        "weekly",
                        "monthly"
                    ]
                },
                "return_date": {
                    "type": "string"
                }
            }
        },
        "handlers.CallAssistanceRequest": {
            "type": "object",
            "required": [
                "description",
                "location",
                "rental_id"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "rental_id": {
                    "type": "integer"
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "handlers.PaymentRequest": {
            "type": "object",
            "properties": {
                "rental_id": {
                    "type": "integer"
                }
            }
        },
        "handlers.RegisterRequest": {
            "type": "object",
            "required": [
                "address",
                "email",
                "password",
                "phone_number"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 3
                },
                "phone_number": {
                    "type": "string"
                },
                "role": {
                    "description": "Optional",
                    "type": "string"
                }
            }
        },
        "handlers.TopUpRequest": {
            "type": "object",
            "properties": {
                "deposit_amount": {
                    "type": "number"
                }
            }
        },
        "handlers.UserResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "phone_number": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "models.Car": {
            "type": "object",
            "properties": {
                "car_id": {
                    "type": "integer"
                },
                "category": {
                    "type": "string"
                },
                "class": {
                    "type": "string"
                },
                "fuel_type": {
                    "type": "string"
                },
                "make": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "rental_costs": {
                    "type": "number"
                },
                "stock_availability": {
                    "type": "integer"
                },
                "transmission": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "models.Driver": {
            "type": "object",
            "properties": {
                "driver_id": {
                    "type": "integer"
                },
                "experience_years": {
                    "type": "integer"
                },
                "license_number": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "rating": {
                    "type": "number"
                }
            }
        },
        "models.EventPackage": {
            "type": "object",
            "properties": {
                "cost": {
                    "type": "number"
                },
                "description": {
                    "type": "string"
                },
                "package_id": {
                    "type": "integer"
                },
                "package_name": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "Jakarta Luxury Rent Car API",
	Description:      "This is Jakarta Luxury Rent Car service API documentation.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
